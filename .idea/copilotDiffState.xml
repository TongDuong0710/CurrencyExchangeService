<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/api/src/main/java/com/example/api/controller/CheckoutController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/src/main/java/com/example/api/controller/CheckoutController.java" />
              <option name="updatedContent" value="package com.example.api.controller;&#10;&#10;import com.example.api.dto.CheckoutRequest;&#10;import com.example.business.cqrs.command.CreateOrderCommand;&#10;import com.example.business.cqrs.command.CreateOrderCommandHandler;&#10;import com.example.domain.model.Order;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * REST controller for checkout operations.&#10; * Uses CQRS command handler to create orders and publish events.&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/checkout&quot;)&#10;public class CheckoutController {&#10;    private final CreateOrderCommandHandler createOrderCommandHandler;&#10;    private final ProductRepository productRepository;&#10;&#10;    public CheckoutController(CreateOrderCommandHandler createOrderCommandHandler, ProductRepository productRepository) {&#10;        this.createOrderCommandHandler = createOrderCommandHandler;&#10;        this.productRepository = productRepository;&#10;    }&#10;&#10;    /**&#10;     * POST /checkout - creates an order and publishes event.&#10;     */&#10;    @PostMapping&#10;    public ResponseEntity&lt;Order&gt; checkout(@RequestBody CheckoutRequest request) {&#10;        List&lt;Product&gt; products = productRepository.findAll().stream()&#10;                .filter(p -&gt; request.getProductIds().contains(p.getId()))&#10;                .collect(Collectors.toList());&#10;        Order order = createOrderCommandHandler.handle(new CreateOrderCommand(products));&#10;        return ResponseEntity.ok(order);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/src/main/java/com/example/api/controller/ProductController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/src/main/java/com/example/api/controller/ProductController.java" />
              <option name="originalContent" value="package com.example.api.controller;&#10;&#10;import com.example.api.dto.ProductResponse;&#10;import com.example.business.cqrs.query.GetProductsQuery;&#10;import com.example.business.cqrs.query.GetProductsQueryHandler;&#10;import com.example.domain.model.Product;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.web.bind.annotation.RequestParam;&#10;import org.springframework.http.ResponseEntity;&#10;import com.example.api.dto.ProductListResponse;&#10;import com.example.api.dto.ProductCreateRequest;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * REST controller exposing product listing endpoint.&#10; * Uses CQRS query handler to fetch products.&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/products&quot;)&#10;public class ProductController {&#10;    private final GetProductsQueryHandler getProductsQueryHandler;&#10;&#10;    public ProductController(GetProductsQueryHandler getProductsQueryHandler) {&#10;        this.getProductsQueryHandler = getProductsQueryHandler;&#10;    }&#10;&#10;    /**&#10;     * GET /products - returns all products as ProductResponse DTOs.&#10;     */&#10;    @GetMapping&#10;    public List&lt;ProductResponse&gt; getProducts() {&#10;        List&lt;Product&gt; products = getProductsQueryHandler.handle(new GetProductsQuery());&#10;        return products.stream()&#10;                .map(p -&gt; new ProductResponse(&#10;                        p.getId(),&#10;                        p.getName(),&#10;                        p.getPrice(),&#10;                        p.getStock(),&#10;                        p.isAvailable(),&#10;                        p.getCategory()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * GET /api/admin/products - paginated, filtered product list for admin&#10;     */&#10;    @GetMapping(&quot;/api/admin/products&quot;)&#10;    public ResponseEntity&lt;ProductListResponse&gt; getAdminProducts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) Double priceMin,&#10;            @RequestParam(required = false) Double priceMax,&#10;            @RequestParam(required = false) Boolean available) {&#10;        Pageable pageable = org.springframework.data.domain.PageRequest.of(page, size);&#10;        Page&lt;Product&gt; productPage = getProductsQueryHandler.handleAdmin(category, priceMin, priceMax, available, pageable);&#10;        List&lt;ProductResponse&gt; products = productPage.getContent().stream()&#10;                .map(p -&gt; new ProductResponse(p.getId(), p.getName(), p.getPrice(), p.getStock(), p.isAvailable(), p.getCategory()))&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(new ProductListResponse(productPage.getTotalElements(), products));&#10;    }&#10;&#10;    /**&#10;     * POST /api/admin/products - create a new product&#10;     * Validates input and sets available = stock &gt; 0&#10;     */&#10;    @PostMapping(&quot;/api/admin/products&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; createProduct(@Valid @RequestBody ProductCreateRequest request) {&#10;        // Validate and create product (delegated to service, not shown here)&#10;        Product product = getProductsQueryHandler.createProduct(request);&#10;        ProductResponse response = new ProductResponse(product.getId(), product.getName(), product.getPrice(), product.getStock(), product.isAvailable(), product.getCategory());&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    /**&#10;     * DELETE /api/admin/products/{id} - delete a product&#10;     * If the product is used in any active deal, returns an error message.&#10;     */&#10;    @DeleteMapping(&quot;/api/admin/products/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; deleteProduct(@PathVariable Long id) {&#10;        try {&#10;            getProductsQueryHandler.deleteProduct(id);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (IllegalStateException ex) {&#10;            // Example: product is used in an active deal&#10;            return ResponseEntity.badRequest().body(ex.getMessage());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.api.controller;&#10;&#10;import com.example.api.dto.ProductResponse;&#10;import com.example.business.cqrs.query.GetProductsQuery;&#10;import com.example.business.cqrs.query.GetProductsQueryHandler;&#10;import com.example.domain.model.Product;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestBody;&#10;import org.springframework.web.bind.annotation.DeleteMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.web.bind.annotation.RequestParam;&#10;import org.springframework.http.ResponseEntity;&#10;import com.example.api.dto.ProductListResponse;&#10;import com.example.api.dto.ProductCreateRequest;&#10;import jakarta.validation.Valid;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;/**&#10; * REST controller exposing product listing endpoint.&#10; * Uses CQRS query handler to fetch products.&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/products&quot;)&#10;public class ProductController {&#10;    private final GetProductsQueryHandler getProductsQueryHandler;&#10;&#10;    public ProductController(GetProductsQueryHandler getProductsQueryHandler) {&#10;        this.getProductsQueryHandler = getProductsQueryHandler;&#10;    }&#10;&#10;    /**&#10;     * GET /products - returns all products as ProductResponse DTOs.&#10;     */&#10;    @GetMapping&#10;    public List&lt;ProductResponse&gt; getProducts() {&#10;        List&lt;Product&gt; products = getProductsQueryHandler.handle(new GetProductsQuery());&#10;        return products.stream()&#10;                .map(p -&gt; new ProductResponse(&#10;                        p.getId(),&#10;                        p.getName(),&#10;                        p.getPrice(),&#10;                        p.getStock(),&#10;                        p.isAvailable(),&#10;                        p.getCategory()&#10;                ))&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * GET /api/admin/products - paginated, filtered product list for admin&#10;     */&#10;    @GetMapping(&quot;/api/admin/products&quot;)&#10;    public ResponseEntity&lt;ProductListResponse&gt; getAdminProducts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) Double priceMin,&#10;            @RequestParam(required = false) Double priceMax,&#10;            @RequestParam(required = false) Boolean available) {&#10;        Pageable pageable = org.springframework.data.domain.PageRequest.of(page, size);&#10;        Page&lt;Product&gt; productPage = getProductsQueryHandler.handleAdmin(category, priceMin, priceMax, available, pageable);&#10;        List&lt;ProductResponse&gt; products = productPage.getContent().stream()&#10;                .map(p -&gt; new ProductResponse(&#10;                        p.getId(),&#10;                        p.getName(),&#10;                        p.getPrice(),&#10;                        p.getStock(),&#10;                        p.isAvailable(),&#10;                        p.getCategory()&#10;                ))&#10;                .collect(Collectors.toList());&#10;        return ResponseEntity.ok(new ProductListResponse(productPage.getTotalElements(), products));&#10;    }&#10;&#10;    /**&#10;     * POST /api/admin/products - create a new product&#10;     * Validates input and sets available = stock &gt; 0&#10;     */&#10;    @PostMapping(&quot;/api/admin/products&quot;)&#10;    public ResponseEntity&lt;ProductResponse&gt; createProduct(@Valid @RequestBody ProductCreateRequest request) {&#10;        Product product = getProductsQueryHandler.createProduct(request);&#10;        ProductResponse response = new ProductResponse(&#10;                product.getId(),&#10;                product.getName(),&#10;                product.getPrice(),&#10;                product.getStock(),&#10;                product.isAvailable(),&#10;                product.getCategory()&#10;        );&#10;        return ResponseEntity.ok(response);&#10;    }&#10;&#10;    /**&#10;     * DELETE /api/admin/products/{id} - delete a product&#10;     * If the product is used in any active deal, returns an error message.&#10;     */&#10;    @DeleteMapping(&quot;/api/admin/products/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; deleteProduct(@PathVariable Long id) {&#10;        try {&#10;            getProductsQueryHandler.deleteProduct(id);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (IllegalStateException ex) {&#10;            return ResponseEntity.badRequest().body(ex.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/src/main/java/com/example/api/dto/CheckoutRequest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/src/main/java/com/example/api/dto/CheckoutRequest.java" />
              <option name="updatedContent" value="package com.example.api.dto;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * DTO for checkout request (order creation).&#10; */&#10;public class CheckoutRequest {&#10;    private List&lt;Long&gt; productIds;&#10;&#10;    public CheckoutRequest() {}&#10;    public CheckoutRequest(List&lt;Long&gt; productIds) {&#10;        this.productIds = productIds;&#10;    }&#10;    public List&lt;Long&gt; getProductIds() { return productIds; }&#10;    public void setProductIds(List&lt;Long&gt; productIds) { this.productIds = productIds; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/src/main/java/com/example/api/dto/ProductListResponse.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/src/main/java/com/example/api/dto/ProductListResponse.java" />
              <option name="updatedContent" value="package com.example.api.dto;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * DTO for paginated product list responses.&#10; */&#10;public class ProductListResponse {&#10;    private long total;&#10;    private List&lt;ProductResponse&gt; products;&#10;&#10;    public ProductListResponse(long total, List&lt;ProductResponse&gt; products) {&#10;        this.total = total;&#10;        this.products = products;&#10;    }&#10;&#10;    public long getTotal() { return total; }&#10;    public List&lt;ProductResponse&gt; getProducts() { return products; }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/api/src/test/java/com/example/api/controller/admin/AdminDealControllerTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/api/src/test/java/com/example/api/controller/admin/AdminDealControllerTest.java" />
              <option name="updatedContent" value="package com.example.api.controller.admin;&#10;&#10;import com.example.api.dto.DealCreateRequest;&#10;import com.example.api.dto.DealResponse;&#10;import com.example.api.mapper.DealApiMapper;&#10;import com.example.api.response.BaseResponseApi;&#10;import com.example.application.admin.AdminDealAppService;&#10;import com.example.domain.deal.DealDto;&#10;import org.junit.jupiter.api.DisplayName;&#10;import org.junit.jupiter.api.Test;&#10;import org.mockito.Mockito;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;&#10;import org.springframework.boot.test.mock.mockito.MockBean;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import static org.mockito.ArgumentMatchers.any;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;import static org.mockito.Mockito.doNothing;&#10;&#10;@WebMvcTest(AdminDealController.class)&#10;class AdminDealControllerTest {&#10;&#10;    @Autowired&#10;    private MockMvc mockMvc;&#10;&#10;    @MockBean&#10;    private AdminDealAppService dealService;&#10;&#10;    @MockBean&#10;    private DealApiMapper mapper;&#10;&#10;    @Test&#10;    @DisplayName(&quot;Create deal - success&quot;)&#10;    void createDeal_success() throws Exception {&#10;        DealCreateRequest request = new DealCreateRequest();&#10;        DealDto dealDto = new DealDto();&#10;        DealResponse response = new DealResponse();&#10;        Mockito.when(mapper.toCommand(any(DealCreateRequest.class))).thenReturn(dealDto);&#10;        Mockito.when(dealService.create(any(DealDto.class))).thenReturn(dealDto);&#10;        Mockito.when(mapper.toResponse(any(DealDto.class))).thenReturn(response);&#10;&#10;        mockMvc.perform(post(&quot;/api/admin/deals&quot;)&#10;                .contentType(MediaType.APPLICATION_JSON)&#10;                .content(&quot;{}&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.success&quot;).value(true));&#10;    }&#10;&#10;    @Test&#10;    @DisplayName(&quot;Delete deal - success&quot;)&#10;    void deleteDeal_success() throws Exception {&#10;        doNothing().when(dealService).delete(1L);&#10;        mockMvc.perform(delete(&quot;/api/admin/deals/1&quot;))&#10;                .andExpect(status().isOk())&#10;                .andExpect(jsonPath(&quot;$.success&quot;).value(true));&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/command/CreateOrderCommand.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/command/CreateOrderCommand.java" />
              <option name="updatedContent" value="package com.example.business.cqrs.command;&#10;&#10;import com.example.domain.model.Order;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;&#10;/**&#10; * Command object for creating an order (CQRS Command).&#10; */&#10;public class CreateOrderCommand {&#10;    private final List&lt;Product&gt; products;&#10;&#10;    public CreateOrderCommand(List&lt;Product&gt; products) {&#10;        this.products = products;&#10;    }&#10;&#10;    public List&lt;Product&gt; getProducts() {&#10;        return products;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/command/CreateOrderCommandHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/command/CreateOrderCommandHandler.java" />
              <option name="updatedContent" value="package com.example.business.cqrs.command;&#10;&#10;import com.example.business.service.OrderService;&#10;import com.example.domain.model.Order;&#10;&#10;/**&#10; * Handler for CreateOrderCommand (CQRS Command Handler).&#10; * Calls OrderService to create an order.&#10; */&#10;public class CreateOrderCommandHandler {&#10;    private final OrderService orderService;&#10;&#10;    public CreateOrderCommandHandler(OrderService orderService) {&#10;        this.orderService = orderService;&#10;    }&#10;&#10;    public Order handle(CreateOrderCommand command) {&#10;        return orderService.createOrder(command.getProducts());&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/query/GetProductsQuery.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/query/GetProductsQuery.java" />
              <option name="updatedContent" value="package com.example.business.cqrs.query;&#10;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;&#10;/**&#10; * Query object for getting all products (CQRS Query).&#10; */&#10;public class GetProductsQuery {&#10;    // No fields needed for this simple query&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/query/GetProductsQueryHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/cqrs/query/GetProductsQueryHandler.java" />
              <option name="originalContent" value="package com.example.business.cqrs.query;&#10;&#10;import com.example.business.service.ProductService;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;&#10;/**&#10; * Handler for GetProductsQuery (CQRS Query Handler).&#10; * Calls ProductService to get all products.&#10; */&#10;public class GetProductsQueryHandler {&#10;    private final ProductService productService;&#10;&#10;    public GetProductsQueryHandler(ProductService productService) {&#10;        this.productService = productService;&#10;    }&#10;&#10;    public List&lt;Product&gt; handle(GetProductsQuery query) {&#10;        return productService.getProducts();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.business.cqrs.query;&#10;&#10;import com.example.business.service.ProductService;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import com.example.api.dto.ProductCreateRequest;&#10;&#10;/**&#10; * Handler for GetProductsQuery (CQRS Query Handler).&#10; * Calls ProductService to get all products.&#10; */&#10;public class GetProductsQueryHandler {&#10;    private final ProductService productService;&#10;&#10;    public GetProductsQueryHandler(ProductService productService) {&#10;        this.productService = productService;&#10;    }&#10;&#10;    public List&lt;Product&gt; handle(GetProductsQuery query) {&#10;        return productService.getProducts();&#10;    }&#10;&#10;    /**&#10;     * Handles paginated, filtered admin product listing.&#10;     */&#10;    public Page&lt;Product&gt; handleAdmin(String category, Double priceMin, Double priceMax, Boolean available, Pageable pageable) {&#10;        return productService.listProducts(category, priceMin, priceMax, available, pageable);&#10;    }&#10;&#10;    /**&#10;     * Handles product creation for admin.&#10;     */&#10;    public Product createProduct(ProductCreateRequest request) {&#10;        return productService.createProduct(&#10;            request.getName(),&#10;            request.getPrice(),&#10;            request.getStock(),&#10;            request.getCategory()&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Handles product deletion for admin.&#10;     */&#10;    public void deleteProduct(Long id) {&#10;        productService.deleteProduct(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/service/OrderService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/service/OrderService.java" />
              <option name="updatedContent" value="package com.example.business.service;&#10;&#10;import com.example.domain.model.Order;&#10;import com.example.domain.model.OrderStatus;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import java.util.List;&#10;&#10;/**&#10; * Service for order-related use cases.&#10; * Handles order creation, status updates, etc.&#10; */&#10;public class OrderService {&#10;    // In a real app, inject OrderRepository and event publisher&#10;    public Order createOrder(List&lt;Product&gt; products) {&#10;        double total = products.stream().mapToDouble(Product::getPrice).sum();&#10;        Order order = new Order(System.currentTimeMillis(), products, total, OrderStatus.CREATED);&#10;        // In a real app, persist order and publish event&#10;        return order;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/business/src/main/java/com/example/business/service/ProductService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/business/src/main/java/com/example/business/service/ProductService.java" />
              <option name="originalContent" value="package com.example.business.service;&#10;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import java.util.List;&#10;&#10;/**&#10; * Application service for product-related use cases.&#10; * Depends on domain layer only.&#10; */&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;&#10;    public ProductService(ProductRepository productRepository) {&#10;        this.productRepository = productRepository;&#10;    }&#10;&#10;    /**&#10;     * Returns all products by delegating to the repository.&#10;     */&#10;    public List&lt;Product&gt; getProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.business.service;&#10;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;import java.util.List;&#10;&#10;/**&#10; * Application service for product-related use cases.&#10; * Depends on domain layer only.&#10; */&#10;public class ProductService {&#10;    private final ProductRepository productRepository;&#10;&#10;    public ProductService(ProductRepository productRepository) {&#10;        this.productRepository = productRepository;&#10;    }&#10;&#10;    /**&#10;     * Returns all products by delegating to the repository.&#10;     */&#10;    public List&lt;Product&gt; getProducts() {&#10;        return productRepository.findAll();&#10;    }&#10;&#10;    /**&#10;     * Creates a new product after validating input.&#10;     * Sets available = stock &gt; 0.&#10;     */&#10;    public Product createProduct(String name, double price, int stock, String category) {&#10;        if (name == null || name.isBlank()) throw new IllegalArgumentException(&quot;Product name must not be empty&quot;);&#10;        if (price &lt;= 0) throw new IllegalArgumentException(&quot;Price must be &gt; 0&quot;);&#10;        if (stock &lt; 0) throw new IllegalArgumentException(&quot;Stock must be &gt;= 0&quot;);&#10;        boolean available = stock &gt; 0;&#10;        Product product = new Product(null, name, price, stock, available, category);&#10;        // In a real app, save to DB and return saved entity with ID&#10;        // Here, just return the constructed product&#10;        return productRepository.save(product);&#10;    }&#10;&#10;    /**&#10;     * Deletes a product if not used in any active deal.&#10;     * Throws IllegalStateException if used in an active deal.&#10;     */&#10;    public void deleteProduct(Long id) {&#10;        // In a real app, check for active deals before deleting&#10;        boolean usedInActiveDeal = false; // TODO: implement check&#10;        if (usedInActiveDeal) {&#10;            throw new IllegalStateException(&quot;Product is used in an active deal and cannot be deleted.&quot;);&#10;        }&#10;        productRepository.deleteById(id);&#10;    }&#10;&#10;    /**&#10;     * Returns paginated, filtered products for admin.&#10;     */&#10;    public Page&lt;Product&gt; listProducts(String category, Double priceMin, Double priceMax, Boolean available, Pageable pageable) {&#10;        return productRepository.findByFilters(category, priceMin, priceMax, available, pageable);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/domain/src/main/java/com/example/domain/model/Order.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/domain/src/main/java/com/example/domain/model/Order.java" />
              <option name="updatedContent" value="package com.example.domain.model;&#10;&#10;import java.util.List;&#10;import java.util.Objects;&#10;&#10;/**&#10; * Order entity represents a customer's order in the electronic store.&#10; * Contains a list of products, total price, and order status.&#10; */&#10;public class Order {&#10;    private Long id;&#10;    private List&lt;Product&gt; products;&#10;    private double totalPrice;&#10;    private OrderStatus status;&#10;&#10;    public Order(Long id, List&lt;Product&gt; products, double totalPrice, OrderStatus status) {&#10;        this.id = id;&#10;        this.products = products;&#10;        this.totalPrice = totalPrice;&#10;        this.status = status;&#10;    }&#10;&#10;    public Long getId() { return id; }&#10;    public List&lt;Product&gt; getProducts() { return products; }&#10;    public double getTotalPrice() { return totalPrice; }&#10;    public OrderStatus getStatus() { return status; }&#10;&#10;    public void setStatus(OrderStatus status) { this.status = status; }&#10;&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Order order = (Order) o;&#10;        return Objects.equals(id, order.id);&#10;    }&#10;&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(id);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/domain/src/main/java/com/example/domain/model/OrderStatus.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/domain/src/main/java/com/example/domain/model/OrderStatus.java" />
              <option name="updatedContent" value="package com.example.domain.model;&#10;&#10;/**&#10; * Enum representing the status of an order.&#10; */&#10;public enum OrderStatus {&#10;    CREATED,&#10;    PAID,&#10;    SHIPPED,&#10;    COMPLETED,&#10;    CANCELLED&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/domain/src/main/java/com/example/domain/repository/ProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/domain/src/main/java/com/example/domain/repository/ProductRepository.java" />
              <option name="originalContent" value="package com.example.domain.repository;&#10;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;&#10;/**&#10; * Repository interface for Product.&#10; * Defines contract for data access, implemented in infra layer.&#10; */&#10;public interface ProductRepository {&#10;    List&lt;Product&gt; findAll();&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.domain.repository;&#10;&#10;import com.example.domain.model.Product;&#10;import java.util.List;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;&#10;/**&#10; * Repository interface for Product.&#10; * Defines contract for data access, implemented in infra layer.&#10; */&#10;public interface ProductRepository {&#10;    List&lt;Product&gt; findAll();&#10;&#10;    /**&#10;     * Find all products with optional filters and pagination.&#10;     */&#10;    Page&lt;Product&gt; findByFilters(String category, Double priceMin, Double priceMax, Boolean available, Pageable pageable);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infra/src/main/java/com/example/infra/config/RedisCacheConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infra/src/main/java/com/example/infra/config/RedisCacheConfig.java" />
              <option name="updatedContent" value="package com.example.infra.config;&#10;&#10;import org.springframework.cache.annotation.EnableCaching;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&#10;import org.springframework.data.redis.core.RedisTemplate;&#10;import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;&#10;import org.springframework.data.redis.serializer.StringRedisSerializer;&#10;&#10;/**&#10; * Redis cache configuration for product caching.&#10; */&#10;@Configuration&#10;@EnableCaching&#10;public class RedisCacheConfig {&#10;    @Bean&#10;    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) {&#10;        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();&#10;        template.setConnectionFactory(connectionFactory);&#10;        template.setKeySerializer(new StringRedisSerializer());&#10;        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());&#10;        return template;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infra/src/main/java/com/example/infra/event/OrderCreatedEventProducer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infra/src/main/java/com/example/infra/event/OrderCreatedEventProducer.java" />
              <option name="updatedContent" value="package com.example.infra.event;&#10;&#10;import com.example.domain.model.Order;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.kafka.core.KafkaTemplate;&#10;import org.springframework.stereotype.Component;&#10;&#10;/**&#10; * Publishes OrderCreatedEvent to Kafka when a new order is created.&#10; */&#10;@Component&#10;public class OrderCreatedEventProducer {&#10;    private final KafkaTemplate&lt;String, Order&gt; kafkaTemplate;&#10;    private final String topic;&#10;&#10;    public OrderCreatedEventProducer(KafkaTemplate&lt;String, Order&gt; kafkaTemplate,&#10;                                     @Value(&quot;${kafka.topic.order-created:order-created}&quot;) String topic) {&#10;        this.kafkaTemplate = kafkaTemplate;&#10;        this.topic = topic;&#10;    }&#10;&#10;    /**&#10;     * Publishes the order to Kafka.&#10;     */&#10;    public void publishOrderCreated(Order order) {&#10;        kafkaTemplate.send(topic, order);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infra/src/main/java/com/example/infra/repository/JpaOrderRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infra/src/main/java/com/example/infra/repository/JpaOrderRepository.java" />
              <option name="updatedContent" value="package com.example.infra.repository;&#10;&#10;import com.example.domain.model.Order;&#10;import com.example.domain.model.OrderStatus;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.stereotype.Repository;&#10;&#10;/**&#10; * JPA repository for Order entity.&#10; * In a real app, this would extend JpaRepository and map to a database table.&#10; */&#10;@Repository&#10;public interface JpaOrderRepository extends JpaRepository&lt;Order, Long&gt; {&#10;    // Additional query methods can be defined here&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/infra/src/main/java/com/example/infra/repository/JpaProductRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/infra/src/main/java/com/example/infra/repository/JpaProductRepository.java" />
              <option name="originalContent" value="package com.example.infra.repository;&#10;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import org.springframework.stereotype.Repository;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;&#10;/**&#10; * Infrastructure implementation of ProductRepository.&#10; * In real app, would use JPA, DB, etc. Here returns mock data.&#10; */&#10;@Repository&#10;public class JpaProductRepository implements ProductRepository {&#10;    @Override&#10;    public List&lt;Product&gt; findAll() {&#10;        // Mock data for demonstration&#10;        return Arrays.asList(&#10;            new Product(1L, &quot;Laptop&quot;, 1200.0),&#10;            new Product(2L, &quot;Smartphone&quot;, 800.0)&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.infra.repository;&#10;&#10;import com.example.domain.model.Product;&#10;import com.example.domain.repository.ProductRepository;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.jpa.repository.JpaRepository;&#10;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;&#10;import org.springframework.stereotype.Repository;&#10;import org.springframework.data.jpa.domain.Specification;&#10;import jakarta.persistence.EntityManager;&#10;import jakarta.persistence.PersistenceContext;&#10;import java.util.List;&#10;&#10;/**&#10; * Infrastructure implementation of ProductRepository.&#10; * In real app, would use JPA, DB, etc. Here returns mock data.&#10; */&#10;@Repository&#10;public interface JpaProductRepository extends JpaRepository&lt;Product, Long&gt;, JpaSpecificationExecutor&lt;Product&gt;, ProductRepository {&#10;    // Spring Data JPA will provide basic CRUD and specification support&#10;}&#10;&#10;// Custom implementation for ProductRepository's findByFilters&#10;@Repository&#10;class JpaProductRepositoryImpl implements ProductRepository {&#10;    @PersistenceContext&#10;    private EntityManager em;&#10;    private final JpaProductRepository jpaRepo;&#10;&#10;    public JpaProductRepositoryImpl(JpaProductRepository jpaRepo) {&#10;        this.jpaRepo = jpaRepo;&#10;    }&#10;&#10;    @Override&#10;    public List&lt;Product&gt; findAll() {&#10;        return jpaRepo.findAll();&#10;    }&#10;&#10;    @Override&#10;    public Page&lt;Product&gt; findByFilters(String category, Double priceMin, Double priceMax, Boolean available, Pageable pageable) {&#10;        Specification&lt;Product&gt; spec = Specification.where(null);&#10;        if (category != null &amp;&amp; !category.isBlank()) {&#10;            spec = spec.and((root, query, cb) -&gt; cb.equal(root.get(&quot;category&quot;), category));&#10;        }&#10;        if (priceMin != null) {&#10;            spec = spec.and((root, query, cb) -&gt; cb.ge(root.get(&quot;price&quot;), priceMin));&#10;        }&#10;        if (priceMax != null) {&#10;            spec = spec.and((root, query, cb) -&gt; cb.le(root.get(&quot;price&quot;), priceMax));&#10;        }&#10;        if (available != null) {&#10;            spec = spec.and((root, query, cb) -&gt; cb.equal(root.get(&quot;available&quot;), available));&#10;        }&#10;        return jpaRepo.findAll(spec, pageable);&#10;    }&#10;&#10;    @Override&#10;    public Product save(Product product) {&#10;        return jpaRepo.save(product);&#10;    }&#10;&#10;    @Override&#10;    public void deleteById(Long id) {&#10;        jpaRepo.deleteById(id);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>